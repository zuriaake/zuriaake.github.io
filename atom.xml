<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zuriaake</title>
  
  <subtitle>Leaning Code Pocket</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zuriaake.github.io/"/>
  <updated>2020-03-17T14:56:46.703Z</updated>
  <id>http://zuriaake.github.io/</id>
  
  <author>
    <name>Zuriaake</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux命令-netstat</title>
    <link href="http://zuriaake.github.io/undefinedLinux%E5%91%BD%E4%BB%A4-netstat/"/>
    <id>http://zuriaake.github.io/undefinedLinux%E5%91%BD%E4%BB%A4-netstat/</id>
    <published>2020-03-16T23:18:19.000Z</published>
    <updated>2020-03-17T14:56:46.703Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>netstat</em></strong> 命令可以用来快速知道你的机器对外开放了哪些端口,主要参数:</p><p>-a    :列出所有的连线状态，包括tcp/udp/unix socket等</p><p>-t    :只列出tcp封包的连线</p><p>-u    :只列出udp封包的连线</p><p>-l    :只列出在Listen(监听)的服务的网络状态</p><p>-p    :列出程序名和程序的pid(有些程序可能需要有root权限的用户才会显示)</p><p>-c    :可以指定多少秒自动更新一次网络状态,比如-c 5就是每5秒更新一次网络状态</p><p>-n    :默认情况下 netstat 会通过反向域名解析技术查找每个 IP 地址对应的主机名。这会降低查找速度。如果你觉得 IP 地址已经足够，而没有必要知道主机名，就使用 -n 选项禁用域名解析功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tulpn</span><br></pre></td></tr></table></figure><p><img src="/images/netstat1.png" alt></p><p>输出的各个栏位的意义：</p><p><strong><em>Proto</em></strong>:该连接的封包协议</p><p><strong><em>Recv-Q</em></strong>:不是使用者程序复制而来总的bytes数</p><p><strong><em>Send-Q</em></strong>:由远端主机传送来的总bytes数，但不具有ACK标识的封包。</p><p><strong><em>Local Address</em></strong>:本机的位址，可以是IP（-n参数）,也可以是完整的主机名称。</p><p>使用的格式是IP:port</p><p>:::port表示的是IPv6的格式,比如图中的:::4000</p><p>0.0.0.0:xx表示对全部界面提供的服务,127.0.0.1:xx只对本机内部放行，外部是完全没法访问到的;图中的192.168.122.1:53是对内部虚拟机提供服务的</p><p><strong><em>Foreign Address</em></strong>:远端主机的IP和port</p><p><strong><em>State</em></strong>:状态列</p><p>主要的状态有：</p><p>   ESTABLISED：已经建立连接</p><p>   SYN_SENT：发出主动连线(SYN标识)的连线封包</p><p>   SYN_RECV：接受到要求主动连线的封包</p><p>   FIN_WAIT1：该socket已经中断，连线中断中</p><p>   FIN_WAIT2：该连线已经中断，但是正在等待对方主机确认中断封包</p><p>   TIME_WAIT：该连线已经中断，但是socket还在网络中等待结束</p><p>   LISTEN：服务的监听端口</p><p><strong><em>PID/Program name</em></strong>：很直白了PID和程序名字，关闭不必要的端口就可以通过这个提供的信息来操作</p><p>比如我的主机端口5900,1080,53,67,4000我确定是要用到的;其他不必要的端口都是由avahi-daemon这个服务在占用着</p><p>来看看这个服务是不是开机启动:</p><pre><code>systemctl list-unit-files | grep avahi</code></pre><p><img src="/images/netstat2.png" alt></p><p>两个相关的服务开机启动,查看该服务的状态:</p><pre><code>systemctl status avahi-daemon</code></pre><p><img src="/images/netstat3.png" alt></p><p>关闭该服务设置开机不启动：</p><pre><code>sudo systemctl stop avahi-daemon.service avahi-daemon.socketsudosystemctl disable avhi-daemon.service avahi-daemon.socket</code></pre><p><img src="/images/netstat4.png" alt></p><p>确认下:</p><pre><code>sudo netstat -tulpn</code></pre><p><img src="/images/netstat5.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;netstat&lt;/em&gt;&lt;/strong&gt; 命令可以用来快速知道你的机器对外开放了哪些端口,主要参数:&lt;/p&gt;
&lt;p&gt;-a    :列出所有的连线状态，包括tcp/udp/unix socket等&lt;/p&gt;
&lt;p&gt;-t    :只列出tcp封包的连线&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式-字符组</title>
    <link href="http://zuriaake.github.io/undefined%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%AD%97%E7%AC%A6%E7%BB%84/"/>
    <id>http://zuriaake.github.io/undefined%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%AD%97%E7%AC%A6%E7%BB%84/</id>
    <published>2020-03-15T14:43:00.000Z</published>
    <updated>2020-03-16T15:44:54.452Z</updated>
    
    <content type="html"><![CDATA[<p>字符组用一组中括号包围:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Zz</span>]uriaake</span><br></pre></td></tr></table></figure><p>会匹配Zuriaake<strong>或者</strong>zuriaake。</p><p>字符组支持范围符”-“:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span><span class="number">-9</span>]</span><br></pre></td></tr></table></figure><p>会匹配0或者1或者2或者3或者4或者5或者6或者7或者8或者9，因此也可以写成这样:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0123456789</span>]</span><br></pre></td></tr></table></figure><p>可以随意的把字符范围和普通字符组合成字符组:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span><span class="number">-9</span>A-Za-z_!.?]</span><br></pre></td></tr></table></figure><p>会匹配一个数字，一个大写的字母，一个小写的字母，下划线，感叹号，点号，问号。<br>点号和问号在正则表达式里都是元字符，但是在字符组里被当作普通的字符处理了，范围符号”-“如果在字符组的开头也会被被当作普通字符处理。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[-.]</span><br></pre></td></tr></table></figure><p>会匹配”-“或者”.”。</p><p>排除型字符组用”^”:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^<span class="number">1</span><span class="number">-6</span>]</span><br></pre></td></tr></table></figure><p>匹配除了1-6的任意字符。</p><p>在字符组外部字符”^”表示一个行锚点(行首)，但是在字符组内部(而且必须是紧接着字符组的第一个方括号之后)，它就是一个元字符。</p><p><strong><em>!!注意:</em></strong><br>  排除型字符组表示”<strong>匹配一个未列出的字符</strong>“而不是”<strong>不要匹配列出的字符</strong>“。</p><p>  也就是 <strong>*<em>一个字符组，包括排除型字符组，都需要匹配到一个字符！ *</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;字符组用一组中括号包围:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;cod
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>科学上网之tsocks</title>
    <link href="http://zuriaake.github.io/undefined%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B9%8Btsocks/"/>
    <id>http://zuriaake.github.io/undefined%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B9%8Btsocks/</id>
    <published>2020-03-12T18:54:42.000Z</published>
    <updated>2020-03-13T07:31:51.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  tsocks - Shell  wrapper to simplify the use of the tsocks library  to transparently allow an application to use a SOCKS proxy.</p></blockquote><p>Archlinux安装tsocks:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo pacman -S tsocks</span><br></pre></td></tr></table></figure><p>新建配置文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo vim /etc/tsocks.conf</span><br></pre></td></tr></table></figure><p>配置文件也很简单:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span> = <span class="number">127.0</span>.<span class="number">0.1</span> <span class="comment">#服务器地址</span></span><br><span class="line"><span class="attr">server_type</span> = <span class="number">5</span>  <span class="comment">#sock类型</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">1080</span> <span class="comment">#sock服务使用的端口号</span></span><br></pre></td></tr></table></figure><p>现在你可以愉快的使用：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tsocks wget <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">tsocks git clone <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">tsocks firefox</span><br><span class="line">tsocks pyenv install <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;  tsocks - Shell  wrapper to simplify the use of the tsocks library  to transparently allow an application to use a SOCKS pr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vim 中批量添加注释</title>
    <link href="http://zuriaake.github.io/undefinedvim-%E4%B8%AD%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E6%B3%A8%E9%87%8A/"/>
    <id>http://zuriaake.github.io/undefinedvim-%E4%B8%AD%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E6%B3%A8%E9%87%8A/</id>
    <published>2020-03-10T09:00:00.000Z</published>
    <updated>2020-03-11T11:26:07.181Z</updated>
    
    <content type="html"><![CDATA[<p>假如在<strong>VIM</strong>里要把下面的设置行都注释掉：</p><p><img src="/images/vim1.png" alt></p><p>推荐第一种方法：</p><p><strong>Ctrl+v</strong>进入块选择模式，移动光标选择需要注释的行,按下大写的I(首行插入模式),输入注释符（比如#）,按<strong>ESC</strong>退出.</p><p><img src="/images/vim2.png" alt></p><p>批量删除刚刚添加的注释符，同样按下<strong>Ctrl+v</strong>进入快选择模式，移动光标选择需要删除的行，</p><p>选好之后直接按<strong>d</strong>删除。</p><p><img src="/images/vim3.png" alt></p><p>第二种方法：<strong>vim</strong>替换命令</p><p>设置行号，因为要用到</p><p><img src="/images/vim4.png" alt></p><p>普通模式下输入:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="number">80</span>,<span class="number">102</span>s/^/#/g</span><br></pre></td></tr></table></figure><p>删除的命令:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="number">80</span>,<span class="number">102</span>s/^/ /</span><br></pre></td></tr></table></figure><p><strong>注意上面有个空字符，没用g，因为这些行其他位置也有#符。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假如在&lt;strong&gt;VIM&lt;/strong&gt;里要把下面的设置行都注释掉：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/vim1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;推荐第一种方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ctrl+v&lt;/strong&gt;进入块选择模式，移动光标选
      
    
    </summary>
    
    
      <category term="vim" scheme="http://zuriaake.github.io/categories/vim/"/>
    
    
      <category term="vim" scheme="http://zuriaake.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>My First Post!</title>
    <link href="http://zuriaake.github.io/undefinedMy-First-Post-1/"/>
    <id>http://zuriaake.github.io/undefinedMy-First-Post-1/</id>
    <published>2020-03-09T08:16:00.000Z</published>
    <updated>2020-03-11T08:46:26.778Z</updated>
    
    <content type="html"><![CDATA[<p>第一次用Hexo,发现在管理和Deploy方面都比Jekyll方便得多。</p><p>这个博客主要用来记录自己在学习中的一些体会或者收获更多的可能只是单纯的做个记录，方便以后自己查询。</p><pre><code>2020-03-21</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一次用Hexo,发现在管理和Deploy方面都比Jekyll方便得多。&lt;/p&gt;
&lt;p&gt;这个博客主要用来记录自己在学习中的一些体会或者收获更多的可能只是单纯的做个记录，方便以后自己查询。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2020-03-21&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
    
      <category term="Other" scheme="http://zuriaake.github.io/categories/Other/"/>
    
    
      <category term="Hexo" scheme="http://zuriaake.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
