{"pages":[{"title":"About","text":"","link":"/about/index.html"},{"title":"Categories","text":"","link":"/categories/index.html"},{"title":"Tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"My First Post!","text":"第一次用Hexo,发现在管理和Deploy方面都比Jekyll方便得多。 这个博客主要用来记录自己在学习中的一些体会或者收获更多的可能只是单纯的做个记录，方便以后自己查询。 2020-03-21","link":"/undefinedMy-First-Post-1/"},{"title":"vim 中批量添加注释","text":"假如在VIM里要把下面的设置行都注释掉： 推荐第一种方法： Ctrl+v进入块选择模式，移动光标选择需要注释的行,按下大写的I(首行插入模式),输入注释符（比如#）,按ESC退出. 批量删除刚刚添加的注释符，同样按下Ctrl+v进入快选择模式，移动光标选择需要删除的行， 选好之后直接按d删除。 第二种方法：vim替换命令 设置行号，因为要用到 普通模式下输入: 1:80,102s/^/#/g 删除的命令: 1:80,102s/^/ / 注意上面有个空字符，没用g，因为这些行其他位置也有#符。","link":"/undefinedvim-%E4%B8%AD%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E6%B3%A8%E9%87%8A/"},{"title":"科学上网之tsocks","text":"tsocks - Shell wrapper to simplify the use of the tsocks library to transparently allow an application to use a SOCKS proxy. Archlinux安装tsocks: 12sudo pacman -S tsocks 新建配置文件: 12sudo vim /etc/tsocks.conf 配置文件也很简单: 123server = 127.0.0.1 #服务器地址server_type = 5 #sock类型server_port = 1080 #sock服务使用的端口号 现在你可以愉快的使用： 12345tsocks wget .......tsocks git clone ...........tsocks firefoxtsocks pyenv install ...........","link":"/undefined%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B9%8Btsocks/"},{"title":"正则表达式-字符组","text":"字符组用一组中括号包围: 1[Zz]uriaake 会匹配Zuriaake或者zuriaake。 字符组支持范围符”-“: 1[0-9] 会匹配0或者1或者2或者3或者4或者5或者6或者7或者8或者9，因此也可以写成这样: 1[0123456789] 可以随意的把字符范围和普通字符组合成字符组: 1[0-9A-Za-z_!.?] 会匹配一个数字，一个大写的字母，一个小写的字母，下划线，感叹号，点号，问号。点号和问号在正则表达式里都是元字符，但是在字符组里被当作普通的字符处理了，范围符号”-“如果在字符组的开头也会被被当作普通字符处理。 1[-.] 会匹配”-“或者”.”。 排除型字符组用”^”: 1[^1-6] 匹配除了1-6的任意字符。 在字符组外部字符”^”表示一个行锚点(行首)，但是在字符组内部(而且必须是紧接着字符组的第一个方括号之后)，它就是一个元字符。 !!注意: 排除型字符组表示”匹配一个未列出的字符“而不是”不要匹配列出的字符“。 也就是 *一个字符组，包括排除型字符组，都需要匹配到一个字符！ *","link":"/undefined%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%AD%97%E7%AC%A6%E7%BB%84/"},{"title":"Linux命令-netstat","text":"netstat 命令可以用来快速知道你的机器对外开放了哪些端口,主要参数: -a :列出所有的连线状态，包括tcp/udp/unix socket等 -t :只列出tcp封包的连线 -u :只列出udp封包的连线 -l :只列出在Listen(监听)的服务的网络状态 -p :列出程序名和程序的pid(有些程序可能需要有root权限的用户才会显示) -c :可以指定多少秒自动更新一次网络状态,比如-c 5就是每5秒更新一次网络状态 -n :默认情况下 netstat 会通过反向域名解析技术查找每个 IP 地址对应的主机名。这会降低查找速度。如果你觉得 IP 地址已经足够，而没有必要知道主机名，就使用 -n 选项禁用域名解析功能。 1sudo netstat -tulpn 输出的各个栏位的意义： Proto:该连接的封包协议 Recv-Q:不是使用者程序复制而来总的bytes数 Send-Q:由远端主机传送来的总bytes数，但不具有ACK标识的封包。 Local Address:本机的位址，可以是IP（-n参数）,也可以是完整的主机名称。 使用的格式是IP:port :::port表示的是IPv6的格式,比如图中的:::4000 0.0.0.0:xx表示对全部界面提供的服务,127.0.0.1:xx只对本机内部放行，外部是完全没法访问到的;图中的192.168.122.1:53是对内部虚拟机提供服务的 Foreign Address:远端主机的IP和port State:状态列 主要的状态有： ESTABLISED：已经建立连接 SYN_SENT：发出主动连线(SYN标识)的连线封包 SYN_RECV：接受到要求主动连线的封包 FIN_WAIT1：该socket已经中断，连线中断中 FIN_WAIT2：该连线已经中断，但是正在等待对方主机确认中断封包 TIME_WAIT：该连线已经中断，但是socket还在网络中等待结束 LISTEN：服务的监听端口 PID/Program name：很直白了PID和程序名字，关闭不必要的端口就可以通过这个提供的信息来操作 比如我的主机端口5900,1080,53,67,4000我确定是要用到的;其他不必要的端口都是由avahi-daemon这个服务在占用着 来看看这个服务是不是开机启动: systemctl list-unit-files | grep avahi 两个相关的服务开机启动,查看该服务的状态: systemctl status avahi-daemon 关闭该服务设置开机不启动： sudo systemctl stop avahi-daemon.service avahi-daemon.socket sudosystemctl disable avhi-daemon.service avahi-daemon.socket 确认下: sudo netstat -tulpn","link":"/undefinedLinux%E5%91%BD%E4%BB%A4-netstat/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"vim","slug":"vim","link":"/tags/vim/"}],"categories":[{"name":"Other","slug":"Other","link":"/categories/Other/"},{"name":"vim","slug":"vim","link":"/categories/vim/"}]}